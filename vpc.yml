AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a VPC with public and private subnets, a route table, and an Internet gateway.

#This resource creates a VPC
Resources:
  SophVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: SophVPC

#This resource creates an Internet Gateway
  SophIG:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: SophIG

#This resource attaches the IG to the VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref SophVPC
      InternetGatewayId: !Ref SophIG

#This resource creates a public route table
  SophPublicRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref SophVPC
      Tags:
        - Key: Name
          Value: SophPublicRT

#This resource creates private route table
  SophPrivateRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref SophVPC
      Tags:
        - Key: Name
          Value: SophPrivateRT

#This resource establishes a route to the IG 
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref SophPublicRT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref SophIG

#This resource creates a public subnet1
  SophPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref SophVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: Name
          Value: SophPublicSubnet1

#This resource creates a public subnet2
  SophPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref SophVPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: Name
          Value: SophPublicSubnet2

#This resource creates a private subnet
  SophPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref SophVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: Name
          Value: SophPrivateSubnet

#This resource establishes an association between the route table and the public subnets
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SophPublicSubnet1
      RouteTableId: !Ref SophPublicRT

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SophPublicSubnet2
      RouteTableId: !Ref SophPublicRT

#This resource establishes an association between the route table and the private subnet
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SophPrivateSubnet
      RouteTableId: !Ref SophPrivateRT

#This resource creates a NAT Elastic IP and NATGateway
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  
  SophNGW:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref SophPublicSubnet1
      Tags:
        - Key: Name
          Value: SophNGW

#This resource establishes a route to the NGW
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref SophPrivateRT
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref SophNGW

#This resource creates a Security Group for the Ubuntu Server
  SophSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access to the server
      VpcId: !Ref SophVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SophSG

#This resource creates an Ubuntu server and installs, enables and starts an Nginx webserver
  SophInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref SophPrivateSubnet
      SecurityGroupIds:
        - !Ref SophSG
      ImageId: ami-0103953a003440c37

      Tags:
        - Key: Name
          Value: SophInstance
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install -y nginx
          sudo systemctl enable nginx
          sudo systemctl start nginx

#This here creates a Security Group for the ALB
  SophALBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access to the load balancer
      VpcId: !Ref SophVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SophALBSG

#This resource creates a Targer Group and registers its target
  SophTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets: 
        - Id: !Ref SophInstance
      UnhealthyThresholdCount: 5
      VpcId: !Ref SophVPC
      Name: SophTargetGroup

#This here creates an Application Load Balancer and Listener and also associates itself with the TG 
  SophALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
        - !Ref SophPublicSubnet1
        - !Ref SophPublicSubnet2
      SecurityGroups: 
        - !Ref SophALBSG

  ElbListener:
   Type: 'AWS::ElasticLoadBalancingV2::Listener'
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref SophTargetGroup
     LoadBalancerArn: !Ref SophALB
     Port: '80'
     Protocol: HTTP